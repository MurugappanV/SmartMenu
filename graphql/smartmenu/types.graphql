# The following types define the data model of the example service
# based on which the GraphQL API is generated

#type User @model {
 # id: ID! @isUnique
 # name: String
 # dateOfBirth: DateTime

  # Uncomment below - you can declare relations between models like this

  # posts: [Post!]! @relation(name: "UserPosts")
# }


# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
# 
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }

# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!
  dateOfBirth: DateTime

  phoneNumbers: [PhoneNumber!]! @relation(name: "UserPhoneNumbers")
  emails: [EMail!]! @relation(name: "UserEmails")
  addresses: [Address!]! @relation(name: "UserAddresses")
  access: Access! @relation(name: "UserAccess")
}

type PhoneNumber @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  phoneNumber: String! @isUnique
  extension: String
  isPrimary: Boolean!

  user: User! @relation(name: "UserPhoneNumbers")
}

type EMail @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  email: String! @isUnique
  isPrimary: Boolean!

  user: User! @relation(name: "UserEmails")
}

type Address @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  address: String! @isUnique
  isPrimary: Boolean!

  user: User! @relation(name: "UserAddresses")
}

type Access @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  accessName: String!
  accessId: Int! @isUnique

  user: [User!]! @relation(name: "UserAccess")
}

type Dish @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!
  price: Float!
  offerPercentage: Float
  avgRating: Float
  quantity: String!
  quantityInPerson: Int @default(value: 1)

  avgPreparationTime: PreparationTime @relation(name: "DishPreparationTime")
  baseDish: [BaseDish!]! @relation(name: "BaseDishOfDish")
}

type BaseDish @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  description: String
  dishType: DishType!
  
  tasteType: Taste! @relation(name: "BaseDishTaste")
  courseType: Course! @relation(name: "BaseDishCourse")
  colorType: Color! @relation(name: "BaseDishColor")
  cookingType: CookingType! @relation(name: "BaseDishCookingType")
  ingredient: [Ingredient!]! @relation(name: "BaseDishIngredient")
  mealType: MealType! @relation(name: "BaseDishMealType")
  dish: Dish @relation(name: "BaseDishOfDish")
}

type Taste @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishTaste")
}

type Color @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishColor")
}

type PreparationTime @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  hours: Int @default(value: 0)
  minutes: Int @default(value: 0)
  seconds: Int @default(value: 0)

  dish: Dish! @relation(name: "DishPreparationTime")
}

type Course @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishCourse")
}

type MealType @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishMealType")
}

type CookingType @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishCookingType")
}

type Ingredient @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String!

  baseDish: [BaseDish!]! @relation(name: "BaseDishIngredient")
}

enum DishType {
  PURE_VEG
  EGG
  NON_VEG
}
